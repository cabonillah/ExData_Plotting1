head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19_23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, unique)
sapply(flags, class)
vapply(flags, classs, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mena)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$hp, mtcars$cyl[3], mean)
abs(round(tapply(mtcars$hp, mtcars$cyl, mean)[3]-tapply(mtcars$hp, mtcars$cyl, mean)[1]))
source('C:/Users/ca_m_/Desktop/R/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('C:/Users/ca_m_/Desktop/R/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('C:/Users/ca_m_/Desktop/R/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
test_matrix
test_matrix$get()
source('C:/Users/ca_m_/Desktop/R/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(test_matrix)
library(swirl)
sswirl()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, rows=10)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
sswirl()
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100 replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100 prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10+)
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
names(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = Stopping Distance"")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
play()
dim(mtcars)
summary(cars)
names(cars)
summary(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rhdf5")
iinstall.packages("RMySQL")
install.packages(“RMySQL”)
install.packages("RMySQL")
library(httr)
oauth_endpoints("github")
library(jsonlite)
library(httr)
library(httpuv)
library(jsonlite)
library(httpuv)
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on your appname, key, and secret
myapp <- oauth_app(appname = "TestCami2",
key = "d48d316c8e9ed079bc63",
secret = "83c62f69b47cb78e5e8f5b4561a8ccd39fc8d3c3")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
names(gitDF)
library(jsonlite)
library(httpuv)
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on your appname, key, and secret
myapp <- oauth_app(appname = "TestCami2",
key = "d48d316c8e9ed079bc63",
secret = "83c62f69b47cb78e5e8f5b4561a8ccd39fc8d3c3")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
names(gitDF)
gitDF["created_at"]
gitDF["full_name"]
gitDF["full_name"]["datasharing"]
gitDF["full_name"]["datasharing", ]
gitDF["full_name"]["datasharing"][:]
gitDF["full_name"]["datasharing"][:,:]
names(gitDF["full_name"]["datasharing"])
names(gitDF["full_name"]["jtleek/datasharing"])
head(gitDF)
gitDF[gitDF["full_name"]=="jtleek/datasharing",]
gitDF[gitDF["full_name"]=="jtleek/datasharing", "created_at"]
source('~/.active-rstudio-document', echo=TRUE)
tables()
data.table::tables()
names(acs)
source('~/.active-rstudio-document', echo=TRUE)
sqldf("select AGEP where unique from acs")
sqldf("select distinct AGEP from acs")
library(XML)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
nchar(htmlCode[10])
source('~/.active-rstudio-document', echo=TRUE)
library(swirl)
swirl()
?csv.read
??csv.read
??read.csv
?read.csv
mydy <- read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydy")
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -(X:size))
select(cran, -5:20)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, country == "CO")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 AND r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version) == TRUE)
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dyplr)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
submit()
submit()
source('C:/Users/ca_m_/AppData/Local/Temp/RtmpCOAZZl/summarize1.R', echo=TRUE)
rlang::last_error()
source('C:/Users/ca_m_/AppData/Local/Temp/RtmpCOAZZl/summarize1.R', echo=TRUE)
submit()
submit()
submit()
submit()
submit()
reset()
swirl()
reset()
swirl()
submit()
pack_sum
bye()
libray(swirl)
library(swirl)
swirl()
students3
submit()
?spread
submit()
submit()
submit()
submit()
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)%>%print
submit()
bye()
library(swirl)
swirl()
library(readr)
parse_number("class5")
?mutate
submit()
students3
submit()
students4
submit()
submit()
submit()
passed
failed
passed.mutate("passed")
passed%>%mutate("passed")
passed%>%mutate(status="passed")
passed <- passed%>%mutate(status="passed")
failed <- failed%>%mutate(status="failed")
package_version("dyplr")
package_version("dplyr")
packageVersion("dplyr")
bind_rows(passed, failed)
sat
?select
?sepearate
?separate
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = now().hours, minutes = now().minutes)
this_moment <- update(this_moment, hours = now().hour, minutes = now().minute)
now()
this_moment <- update(this_moment, hours = 10, minutes = 16)
this_moment
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc+days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- nyc+hours(15)+minutes(50)
arrive <- departy+hours(15)+minutes(50)
arrive <- depart+hours(15)+minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
?contains
library(dplyr)
?gsub
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta" lwd=4)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main = "Number of Counties in Each Region")
bye()
library(swirl)
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed),max(cars$dist), "SWIRL rules!")
head(states)
head(state)
table(state$region)
xyplot(Life.Exp~Income|region, data = state, layout = c(4, 1))
xyplot(Life.Exp~Income|region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
bye()
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main= "Ozone and Wind in New York City")
lenght(par())
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = n)
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <-  airquality$Month[5]
may <- subset(airquality, Month == 5)
?points
?pch
plot(may$Wind, may$Ozone, pch = 17, col = "blue")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
points(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
vline(median(airquality$Wind), lty = 2, lwd = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), omar = c(0, 0, 2, 0))
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation)
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext( "Ozone and Weather in New York City", outer = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rows_read
rows_read <- grep("3/2/2007", "household_power_consumption.txt") - grep("1/2/2007", "household_power_consumption.txt")
rows_read <- grep("3/2/2007", readLines("household_power_consumption.txt"))[1] - grep("1/2/2007", readLines("household_power_consumption.txt"))
rows_read <- grep("3/2/2007", readLines("household_power_consumption.txt"))[1] - grep("1/2/2007", readLines("household_power_consumption.txt")[1])
rows_read <- grep("3/2/2007", readLines("household_power_consumption.txt"))[1] - grep("1/2/2007", readLines("household_power_consumption.txt"))[1]
rows_read
data <- read.table("household_power_consumption.txt", col.names = c("Date",
"Time",
"Global_active_power",
"Global_reactive_power",
"Voltage",
"Global_intensity",
"Sub_metering_1",
"Sub_metering_2",
"Sub_metering_3"),
sep = ";",
skip= grep("^[1,2]/2/2007", readLines("household_power_consumption.txt"))[1]-1,
nrows = rows_read)
tail(data)
head(rows_read)
head(data)
